#!/usr/bin/env python
import argparse
import logging

import gui
import compression
import neural_network


def main():
    args = parse_arguments()
    format_logger()

    globals()['do_' + args.command](args)


def do_gui(args):
    app = gui.Application()
    app.mainloop()


def do_teach(args):
    logger = logging.getLogger('logger')
    try:
        logger.info('Running program in teaching mode')
        compression.teach(args.output + '.mkm', args.teach, args.repeat, args.rate, args.size)
    except compression.ZdpException as exc:
        logger.critical(exc.message)
        exit(2)


def do_compress(args):
    logger = logging.getLogger('logger')
    try:
        logger.info('Running program in compression mode')
        compression.compress(args.input, args.network, args.output + '.zdp', args.bit, args.smooth)
    except neural_network.NeuralNetworkException as exc:
        logger.critical('Cannot load neural network: ' + exc.message)
        exit(1)
    except IOError as exc:
        logger.critical('Cannot load neural network: ' + exc.strerror)
        exit(exc.errno)
    except compression.ZdpException as exc:
        logger.critical(exc.message)
        exit(2)


def do_decompress(args):
    logger = logging.getLogger('logger')
    try:
        logger.info('Running program in decompression mode')
        compression.decompress(args.input, args.network, args.output)
    except neural_network.NeuralNetworkException as exc:
        logger.critical('Cannot load neural network: ' + exc.message)
        exit(1)
    except IOError as exc:
        logger.critical('Cannot load neural network: ' + exc.strerror)
        exit(exc.errno)
    except compression.ZdpException as exc:
        logger.critical(exc.message)
        exit(2)


def parse_arguments():
    parser = argparse.ArgumentParser(description='Image compression using neural network', formatter_class=argparse.RawTextHelpFormatter)
    subparsers = parser.add_subparsers(help='help for subcommands')

    # create the parser for the 'gui' command
    parser_gui = subparsers.add_parser('gui', help='run program in graphical user interface')
    parser_gui.set_defaults(command='gui')

    # create the parser for the 'teach' command
    parser_teach = subparsers.add_parser('teach', help='create and teach new neural network using training data located in given directory')
    parser_teach.add_argument('-t', '--teach', type=str, metavar='PATH', help='indicates path where is located training image', required=True)
    parser_teach.add_argument('-o', '--output', type=str, metavar='PATH', default='network',
                              help='indicates path where generated neural network network will be saved (default network.mkm)')
    parser_teach.add_argument('--repeat', type=int, metavar='NUMBER', default=30000,
                              help='indicates how many steps has to be taken during teaching algorithms (default 30000)')
    parser_teach.add_argument('--rate', type=float, metavar='<0,1>', default=0.5,
                              help='indicates learning rate, speed of teaching algorithm (default 0.5)')
    parser_teach.add_argument('--size', type=int, metavar='NUMBER', default=32,
                              help='indicates number of hidden layer neurons, must be multiple of 8 (default 32)')
    parser_teach.set_defaults(command='teach')

    # create the parser for the 'compress' command
    parser_compress = subparsers.add_parser('compress', help='Compress given image using existing neural network')
    parser_compress.add_argument('-i', '--input', type=str, metavar='PATH', help='indicates path to compress image', required=True)
    parser_compress.add_argument('-n', '--network', type=str, metavar='PATH', default='network.mkm',
                                 help='indicates path where neural network is located (default network.mkm)')
    parser_compress.add_argument('-o', '--output', type=str, metavar='PATH', default='compressed_image',
                                 help='indicates path where compressed image will be saved (default compressed_image.zdp)')
    parser_compress.add_argument('-b', '--bit', type=int, default=4, choices=[1, 2, 3, 4, 5, 6, 7, 8],
                                 help='indicates number of bits per pixel in compressed image (default 4)')
    parser_compress.add_argument('-s', '--smooth', action='store_true', help='Adds extra data during compression to smooth decompressed image')
    parser_compress.set_defaults(command='compress')

    # create the parser for the 'decompress' command
    parser_decompress = subparsers.add_parser('decompress', help='Decompress given image using existing neural network')
    parser_decompress.add_argument('-i', '--input', type=str, metavar='PATH', default='compressed_image.zdp',
                                   help='Indicates path to compressed image (default compressed_image.zdp)')
    parser_decompress.add_argument('-n', '--network', type=str, metavar='PATH', default='network.mkm',
                                   help='Indicates path where neural network is located (default network.mkm)')
    parser_decompress.add_argument('-o', '--output', type=str, metavar='PATH', default='decompressed_image.bmp',
                                   help='Indicates path where decompressed image will be saved (default decompressed_image.bmp)')
    parser_decompress.set_defaults(command='decompress')

    args = parser.parse_args()
    return args


def format_logger():
    logger = logging.getLogger('logger')
    logger.setLevel(logging.INFO)
    console_handler = logging.StreamHandler()
    formatter = logging.Formatter('%(levelname)s: %(message)s')
    console_handler.setFormatter(formatter)
    logger.addHandler(console_handler)


if __name__ == '__main__':
    main()